# Multi-stage build for Railway deployment
FROM node:lts-alpine as backend-builder

WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm install
COPY backend/ ./
RUN npm run build

FROM node:lts-alpine as frontend-builder

WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm install
COPY frontend/ ./
RUN npm run build

# Final stage with nginx
FROM nginx:alpine

# Copy nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy SSL certificates
RUN mkdir -p /etc/nginx/certs
COPY certificates/ /etc/nginx/certs/

# Copy frontend build
COPY --from=frontend-builder /app/frontend/dist /usr/share/nginx/html/dist
COPY --from=frontend-builder /app/frontend/index.html /usr/share/nginx/html/
COPY --from=frontend-builder /app/frontend/assets /usr/share/nginx/html/assets

# Copy backend for running alongside nginx
COPY --from=backend-builder /app/backend/dist /app/backend/dist
COPY --from=backend-builder /app/backend/node_modules /app/backend/node_modules
COPY --from=backend-builder /app/backend/package.json /app/backend/

# Install Node.js for running backend
RUN apk add --no-cache nodejs npm

# Create startup script
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'cd /app/backend && node dist/server.js &' >> /start.sh && \
    echo 'nginx -g "daemon off;"' >> /start.sh && \
    chmod +x /start.sh

EXPOSE 80 443 3000

CMD ["/start.sh"]
