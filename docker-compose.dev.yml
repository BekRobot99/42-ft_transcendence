services:
  ts-watcher: # Frontend TypeScript watcher
    image: node:lts-alpine
    working_dir: /app/frontend
    volumes:
      - ./frontend:/app/frontend # Mount the local frontend directory into the container
    command: sh -c "npm install && npm run watch"

  web: # Nginx for development
    image: nginx:alpine
    ports:
      - "8080:443" # HTTPS
      - "8000:80"  # HTTP for redirect
    volumes:
      - ./frontend/index.html:/usr/share/nginx/html/index.html
      - ./frontend/styles.css:/usr/share/nginx/html/styles.css
      - ./frontend/assets:/usr/share/nginx/html/assets
      - ./frontend/dist:/usr/share/nginx/html/dist # Nginx serves the dist folder updated by ts-watcher
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs:/etc/nginx/certs:ro # Mount SSL certificates
    depends_on:
      - ts-watcher # Ensures ts-watcher starts, though Nginx will serve available files regardless
      - backend # Depends on the backend (renamed)
    container_name: ft_transcendence_nginx_dev

  backend: # Backend service for development
    image: node:lts-alpine # We could also use a specific ts-node-dev image
    working_dir: /app
    volumes:
      - ./backend:/app # Mount backend source code
      - /app/node_modules # Anonymous volume to prevent host node_modules from overwriting container's
      - ./backend/database:/app/database # Persist SQLite database during dev
    command: sh -c "npm install && npm run dev" # Install deps and run dev script
    # ports: # We can expose if direct access is needed for debugging, otherwise Nginx proxy is enough
      # - "3000:3000"
    environment:
      - NODE_ENV=development
    container_name: ft_transcendence_backend_dev

volumes:
  database_data_dev: